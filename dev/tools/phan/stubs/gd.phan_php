<?php
// These stubs were generated by the phan stub generator.
// @phan-stub-for-extension gd@8.2.11

namespace {
final class GdFont {
}

final class GdImage {
}

function gd_info() : array {}
function imageaffine(\GdImage $image, array $affine, ?array $clip = null) : \GdImage|false {}
function imageaffinematrixconcat(array $matrix1, array $matrix2) : array|false {}
function imageaffinematrixget(int $type, $options) : array|false {}
function imagealphablending(\GdImage $image, bool $enable) : bool {}
function imageantialias(\GdImage $image, bool $enable) : bool {}
function imagearc(\GdImage $image, int $center_x, int $center_y, int $width, int $height, int $start_angle, int $end_angle, int $color) : bool {}
function imageavif(\GdImage $image, $file = null, int $quality = -1, int $speed = -1) : bool {}
function imagebmp(\GdImage $image, $file = null, bool $compressed = true) : bool {}
function imagechar(\GdImage $image, \GdFont|int $font, int $x, int $y, string $char, int $color) : bool {}
function imagecharup(\GdImage $image, \GdFont|int $font, int $x, int $y, string $char, int $color) : bool {}
function imagecolorallocate(\GdImage $image, int $red, int $green, int $blue) : false|int {}
function imagecolorallocatealpha(\GdImage $image, int $red, int $green, int $blue, int $alpha) : false|int {}
function imagecolorat(\GdImage $image, int $x, int $y) : false|int {}
function imagecolorclosest(\GdImage $image, int $red, int $green, int $blue) : int {}
function imagecolorclosestalpha(\GdImage $image, int $red, int $green, int $blue, int $alpha) : int {}
function imagecolorclosesthwb(\GdImage $image, int $red, int $green, int $blue) : int {}
function imagecolordeallocate(\GdImage $image, int $color) : bool {}
function imagecolorexact(\GdImage $image, int $red, int $green, int $blue) : int {}
function imagecolorexactalpha(\GdImage $image, int $red, int $green, int $blue, int $alpha) : int {}
function imagecolormatch(\GdImage $image1, \GdImage $image2) : bool {}
function imagecolorresolve(\GdImage $image, int $red, int $green, int $blue) : int {}
function imagecolorresolvealpha(\GdImage $image, int $red, int $green, int $blue, int $alpha) : int {}
function imagecolorset(\GdImage $image, int $color, int $red, int $green, int $blue, int $alpha = 0) : ?false {}
function imagecolorsforindex(\GdImage $image, int $color) : array {}
function imagecolorstotal(\GdImage $image) : int {}
function imagecolortransparent(\GdImage $image, ?int $color = null) : int {}
function imageconvolution(\GdImage $image, array $matrix, float $divisor, float $offset) : bool {}
function imagecopy(\GdImage $dst_image, \GdImage $src_image, int $dst_x, int $dst_y, int $src_x, int $src_y, int $src_width, int $src_height) : bool {}
function imagecopymerge(\GdImage $dst_image, \GdImage $src_image, int $dst_x, int $dst_y, int $src_x, int $src_y, int $src_width, int $src_height, int $pct) : bool {}
function imagecopymergegray(\GdImage $dst_image, \GdImage $src_image, int $dst_x, int $dst_y, int $src_x, int $src_y, int $src_width, int $src_height, int $pct) : bool {}
function imagecopyresampled(\GdImage $dst_image, \GdImage $src_image, int $dst_x, int $dst_y, int $src_x, int $src_y, int $dst_width, int $dst_height, int $src_width, int $src_height) : bool {}
function imagecopyresized(\GdImage $dst_image, \GdImage $src_image, int $dst_x, int $dst_y, int $src_x, int $src_y, int $dst_width, int $dst_height, int $src_width, int $src_height) : bool {}
function imagecreate(int $width, int $height) : \GdImage|false {}
function imagecreatefromavif(string $filename) : \GdImage|false {}
function imagecreatefrombmp(string $filename) : \GdImage|false {}
function imagecreatefromgd(string $filename) : \GdImage|false {}
function imagecreatefromgd2(string $filename) : \GdImage|false {}
function imagecreatefromgd2part(string $filename, int $x, int $y, int $width, int $height) : \GdImage|false {}
function imagecreatefromgif(string $filename) : \GdImage|false {}
function imagecreatefromjpeg(string $filename) : \GdImage|false {}
function imagecreatefrompng(string $filename) : \GdImage|false {}
function imagecreatefromstring(string $data) : \GdImage|false {}
function imagecreatefromtga(string $filename) : \GdImage|false {}
function imagecreatefromwbmp(string $filename) : \GdImage|false {}
function imagecreatefromwebp(string $filename) : \GdImage|false {}
function imagecreatefromxbm(string $filename) : \GdImage|false {}
function imagecreatefromxpm(string $filename) : \GdImage|false {}
function imagecreatetruecolor(int $width, int $height) : \GdImage|false {}
function imagecrop(\GdImage $image, array $rectangle) : \GdImage|false {}
function imagecropauto(\GdImage $image, int $mode = \IMG_CROP_DEFAULT, float $threshold = 0.5, int $color = -1) : \GdImage|false {}
function imagedashedline(\GdImage $image, int $x1, int $y1, int $x2, int $y2, int $color) : bool {}
function imagedestroy(\GdImage $image) : bool {}
function imageellipse(\GdImage $image, int $center_x, int $center_y, int $width, int $height, int $color) : bool {}
function imagefill(\GdImage $image, int $x, int $y, int $color) : bool {}
function imagefilledarc(\GdImage $image, int $center_x, int $center_y, int $width, int $height, int $start_angle, int $end_angle, int $color, int $style) : bool {}
function imagefilledellipse(\GdImage $image, int $center_x, int $center_y, int $width, int $height, int $color) : bool {}
function imagefilledpolygon(\GdImage $image, array $points, int $num_points_or_color, ?int $color = null) : bool {}
function imagefilledrectangle(\GdImage $image, int $x1, int $y1, int $x2, int $y2, int $color) : bool {}
function imagefilltoborder(\GdImage $image, int $x, int $y, int $border_color, int $color) : bool {}
function imagefilter(\GdImage $image, int $filter, ...$args) : bool {}
function imageflip(\GdImage $image, int $mode) : bool {}
function imagefontheight(\GdFont|int $font) : int {}
function imagefontwidth(\GdFont|int $font) : int {}
function imageftbbox(float $size, float $angle, string $font_filename, string $string, array $options = []) : array|false {}
function imagefttext(\GdImage $image, float $size, float $angle, int $x, int $y, int $color, string $font_filename, string $text, array $options = []) : array|false {}
function imagegammacorrect(\GdImage $image, float $input_gamma, float $output_gamma) : bool {}
function imagegd(\GdImage $image, ?string $file = null) : bool {}
function imagegd2(\GdImage $image, ?string $file = null, int $chunk_size = unknown, int $mode = unknown) : bool {}
function imagegetclip(\GdImage $image) : array {}
function imagegetinterpolation(\GdImage $image) : int {}
function imagegif(\GdImage $image, $file = null) : bool {}
function imageinterlace(\GdImage $image, ?bool $enable = null) : bool {}
function imageistruecolor(\GdImage $image) : bool {}
function imagejpeg(\GdImage $image, $file = null, int $quality = -1) : bool {}
function imagelayereffect(\GdImage $image, int $effect) : bool {}
function imageline(\GdImage $image, int $x1, int $y1, int $x2, int $y2, int $color) : bool {}
function imageloadfont(string $filename) : \GdFont|false {}
function imageopenpolygon(\GdImage $image, array $points, int $num_points_or_color, ?int $color = null) : bool {}
function imagepalettecopy(\GdImage $dst, \GdImage $src) : void {}
function imagepalettetotruecolor(\GdImage $image) : bool {}
function imagepng(\GdImage $image, $file = null, int $quality = -1, int $filters = -1) : bool {}
function imagepolygon(\GdImage $image, array $points, int $num_points_or_color, ?int $color = null) : bool {}
function imagerectangle(\GdImage $image, int $x1, int $y1, int $x2, int $y2, int $color) : bool {}
function imageresolution(\GdImage $image, ?int $resolution_x = null, ?int $resolution_y = null) : array|bool {}
function imagerotate(\GdImage $image, float $angle, int $background_color, bool $ignore_transparent = false) : \GdImage|false {}
function imagesavealpha(\GdImage $image, bool $enable) : bool {}
function imagescale(\GdImage $image, int $width, int $height = -1, int $mode = \IMG_BILINEAR_FIXED) : \GdImage|false {}
function imagesetbrush(\GdImage $image, \GdImage $brush) : bool {}
function imagesetclip(\GdImage $image, int $x1, int $y1, int $x2, int $y2) : bool {}
function imagesetinterpolation(\GdImage $image, int $method = \IMG_BILINEAR_FIXED) : bool {}
function imagesetpixel(\GdImage $image, int $x, int $y, int $color) : bool {}
function imagesetstyle(\GdImage $image, array $style) : bool {}
function imagesetthickness(\GdImage $image, int $thickness) : bool {}
function imagesettile(\GdImage $image, \GdImage $tile) : bool {}
function imagestring(\GdImage $image, \GdFont|int $font, int $x, int $y, string $string, int $color) : bool {}
function imagestringup(\GdImage $image, \GdFont|int $font, int $x, int $y, string $string, int $color) : bool {}
function imagesx(\GdImage $image) : int {}
function imagesy(\GdImage $image) : int {}
function imagetruecolortopalette(\GdImage $image, bool $dither, int $num_colors) : bool {}
function imagettfbbox(float $size, float $angle, string $font_filename, string $string, array $options = []) : array|false {}
function imagettftext(\GdImage $image, float $size, float $angle, int $x, int $y, int $color, string $font_filename, string $text, array $options = []) : array|false {}
function imagetypes() : int {}
function imagewbmp(\GdImage $image, $file = null, ?int $foreground_color = null) : bool {}
function imagewebp(\GdImage $image, $file = null, int $quality = -1) : bool {}
function imagexbm(\GdImage $image, ?string $filename, ?int $foreground_color = null) : bool {}
const GD_BUNDLED = 0;
const GD_EXTRA_VERSION = '';
const GD_MAJOR_VERSION = 2;
const GD_MINOR_VERSION = 3;
const GD_RELEASE_VERSION = 3;
const GD_VERSION = '2.3.3';
const IMG_AFFINE_ROTATE = 2;
const IMG_AFFINE_SCALE = 1;
const IMG_AFFINE_SHEAR_HORIZONTAL = 3;
const IMG_AFFINE_SHEAR_VERTICAL = 4;
const IMG_AFFINE_TRANSLATE = 0;
const IMG_ARC_CHORD = 1;
const IMG_ARC_EDGED = 4;
const IMG_ARC_NOFILL = 2;
const IMG_ARC_PIE = 0;
const IMG_ARC_ROUNDED = 0;
const IMG_AVIF = 256;
const IMG_BELL = 1;
const IMG_BESSEL = 2;
const IMG_BICUBIC = 4;
const IMG_BICUBIC_FIXED = 5;
const IMG_BILINEAR_FIXED = 3;
const IMG_BLACKMAN = 6;
const IMG_BMP = 64;
const IMG_BOX = 7;
const IMG_BSPLINE = 8;
const IMG_CATMULLROM = 9;
const IMG_COLOR_BRUSHED = -3;
const IMG_COLOR_STYLED = -2;
const IMG_COLOR_STYLEDBRUSHED = -4;
const IMG_COLOR_TILED = -5;
const IMG_COLOR_TRANSPARENT = -6;
const IMG_CROP_BLACK = 2;
const IMG_CROP_DEFAULT = 0;
const IMG_CROP_SIDES = 4;
const IMG_CROP_THRESHOLD = 5;
const IMG_CROP_TRANSPARENT = 1;
const IMG_CROP_WHITE = 3;
const IMG_EFFECT_ALPHABLEND = 1;
const IMG_EFFECT_MULTIPLY = 4;
const IMG_EFFECT_NORMAL = 2;
const IMG_EFFECT_OVERLAY = 3;
const IMG_EFFECT_REPLACE = 0;
const IMG_FILTER_BRIGHTNESS = 2;
const IMG_FILTER_COLORIZE = 4;
const IMG_FILTER_CONTRAST = 3;
const IMG_FILTER_EDGEDETECT = 5;
const IMG_FILTER_EMBOSS = 6;
const IMG_FILTER_GAUSSIAN_BLUR = 7;
const IMG_FILTER_GRAYSCALE = 1;
const IMG_FILTER_MEAN_REMOVAL = 9;
const IMG_FILTER_NEGATE = 0;
const IMG_FILTER_PIXELATE = 11;
const IMG_FILTER_SCATTER = 12;
const IMG_FILTER_SELECTIVE_BLUR = 8;
const IMG_FILTER_SMOOTH = 10;
const IMG_FLIP_BOTH = 3;
const IMG_FLIP_HORIZONTAL = 1;
const IMG_FLIP_VERTICAL = 2;
const IMG_GAUSSIAN = 10;
const IMG_GD2_COMPRESSED = 2;
const IMG_GD2_RAW = 1;
const IMG_GENERALIZED_CUBIC = 11;
const IMG_GIF = 1;
const IMG_HAMMING = 13;
const IMG_HANNING = 14;
const IMG_HERMITE = 12;
const IMG_JPEG = 2;
const IMG_JPG = 2;
const IMG_MITCHELL = 15;
const IMG_NEAREST_NEIGHBOUR = 16;
const IMG_PNG = 4;
const IMG_POWER = 17;
const IMG_QUADRATIC = 18;
const IMG_SINC = 19;
const IMG_TGA = 128;
const IMG_TRIANGLE = 20;
const IMG_WBMP = 8;
const IMG_WEBP = 32;
const IMG_WEBP_LOSSLESS = 101;
const IMG_WEIGHTED4 = 21;
const IMG_XPM = 16;
const PNG_ALL_FILTERS = 248;
const PNG_FILTER_AVG = 64;
const PNG_FILTER_NONE = 8;
const PNG_FILTER_PAETH = 128;
const PNG_FILTER_SUB = 16;
const PNG_FILTER_UP = 32;
const PNG_NO_FILTER = 0;
}
